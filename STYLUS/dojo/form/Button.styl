//
// Copyright 2014 Esri
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

/* Button | DropDownButton | ComboButton | ToggleButton
 * 
 * Styling Buttons mainly includes:
 * 
 * 1. Containers
 * 		.dijitButton
 * 		.dijitDropDownButton
 * 		.dijitComboButton
 * 		.dijitButtonNode - common button/arrow wrapper shared across all three button types 
 *
 * 2. Button text
 * 		.dijitButtonText
 * 
 * 3. Arrows - only for DropDownButton and ComboButton
 * 	     There are total four directions arrows - down, left, right, up:
 * 		.dijitArrowButtonInner - down arrow by default
 *      .dijitLeftArrowButton .dijitArrowButtonInner - left arrow
 *      .dijitRightArrowButton .dijitArrowButtonInner - right arrow
 *      .dijitUpArrowButton .dijitArrowButtonInner - up arrow
 * 
 * 4. States - Hover, Active, Disabled, e.g.
 * 		.dijitButtonHover .dijitButtonNode
 * 		.dijitButtonActive .dijitButtonNode
 * 		.dijitButtonDisabled .dijitButtonNode
 *      
 *      .dijitDisabled .dijitArrowButtonInner  - disabled arrow states 
 */

@import "../../variables";

.dijitButtonText {
	padding: 0 $padding;
	text-align: center;
}

/* Default button */

.dijitButton,
.dijitDropDownButton,
.dijitComboButton,
.dijitToggleButton {
	.dijitButtonNode {
		button-style();
	}
}

/* Alternative button colors */
create-alternative-buttons($button-alternative-colors);

/* hover status */

.dijitButtonHover,
.dijitDropDownButtonHover,
.dijitToggleButtonHover {
	.dijitButtonNode {
		button-hover-style();
	}
}
.dijitComboButton {
	.dijitButtonNodeHover, 
	.dijitDownArrowButtonHover {
		button-hover-style();
	}
}

/* Alternative button colors */
create-alternative-buttons-hover($button-alternative-colors);

/* active, checked status */

.dijitButtonActive, 
.dijitDropDownButtonActive,
.dijitToggleButtonActive,
.dijitToggleButtonChecked {
	.dijitButtonNode {
		button-active-style();
	}
}
.dijitComboButton {
	.dijitButtonNodeActive, 
	.dijitDownArrowButtonActive {
		button-active-style();
	}
}

create-alternative-buttons-active($button-alternative-colors);

/* disabled status */

.dijitButtonDisabled,
.dijitDropDownButtonDisabled,
.dijitComboButtonDisabled,
.dijitToggleButtonDisabled {
	outline: none;
}

.dijitButtonDisabled,
.dijitDropDownButtonDisabled,
.dijitComboButtonDisabled,
.dijitToggleButtonDisabled { 
	.dijitButtonNode {
		button-disabled-style();
	}
}

.dijitComboButtonDisabled .dijitArrowButton { 
	border-left-width: 0;
}

/* ComboButton */

table.dijitComboButton {
	border-collapse: separate;	/* override dijit.css so that ComboBox rounded corners work */
	.dijitStretch {
		border-radius: $border-radius 0 0 $border-radius;
	}
	.dijitArrowButton {
		border-radius: 0 $border-radius $border-radius 0;
		border-left-width: 0;
	}
}

/* ToggleButton */

.dijitToggleButton {
	.dijitCheckBoxIcon {
		display: none;
	}
}

.dijitToggleButtonChecked {
	.dijitIcon {
		display: inline-block;
	}
}


/* arrow styles for down/up/left/right directions */

.dijitDropDownButton .dijitArrowButtonInner{
	margin-left: $padding * 3;
}

.dijitDropDownButton .dijitArrowButtonInner,
.dijitArrowButton  {
	_icon-core-style();
}

.dijitDropDownButton .dijitArrowButtonInner:before,
.dijitArrowButton:before {
	content: "\f0d7";
}

.dijitLeftArrowButton:before {
	content: "\f0d9";
}

.dijitRightArrowButton:before {
	content: "\f0da";
}

.dijitUpArrowButton:before {
	content: "\f0d8";
}